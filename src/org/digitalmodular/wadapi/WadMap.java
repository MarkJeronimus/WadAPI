package wadapi;

import org.jetbrains.annotations.Nullable;

import static org.digitalmodular.utilities.ValidatorUtilities.requireNonNull;
import static org.digitalmodular.utilities.ValidatorUtilities.requireThat;

import wadapi.lump.BinaryLump;
import wadapi.lump.LinedefsLump;
import wadapi.lump.Lump;
import wadapi.lump.NodesLump;
import wadapi.lump.SectorsLump;
import wadapi.lump.SegmentsLump;
import wadapi.lump.SidedefsLump;
import wadapi.lump.SubsectorsLump;
import wadapi.lump.TextLump;
import wadapi.lump.ThingsLump;
import wadapi.lump.VerticesLump;

/**
 * @author Zom-B
 */
// Created 2011-09-12
@SuppressWarnings({"ConstructorWithTooManyParameters", "OverlyCoupledMethod"})
public class WadMap {
	private final     Lump           mapLump;       // Mandatory (optionally with data)
	private final     ThingsLump     thingsLump;    // Mandatory
	private final     LinedefsLump   linedefsLump;  // Mandatory
	private final     SidedefsLump   sidedefsLump;  // Mandatory
	private final     VerticesLump   verticesLump;  // Mandatory
	private @Nullable SegmentsLump   segmentsLump;  // Generated by node builders
	private @Nullable SubsectorsLump ssectorsLump;  // Generated by node builders
	private @Nullable NodesLump      nodesLump;     // Generated by node builders
	private final     SectorsLump    sectorsLump;   // Mandatory
	private @Nullable BinaryLump     rejectLump;    // Generated by node builders
	private @Nullable BinaryLump     blockmapLump;  // Generated by node builders
	private @Nullable TextLump       scriptsLump;   // Optional
	private @Nullable BinaryLump     behaviorLump;  // Generated by script compilers

	public WadMap(Lump mapLump,
	              ThingsLump thingsLump,
	              LinedefsLump linedefsLump,
	              SidedefsLump sidedefsLump,
	              VerticesLump verticesLump,
	              @Nullable SegmentsLump segmentsLump,
	              @Nullable SubsectorsLump ssectorsLump,
	              @Nullable NodesLump nodesLump,
	              SectorsLump sectorsLump,
	              @Nullable BinaryLump rejectLump,
	              @Nullable BinaryLump blockmapLump,
	              @Nullable TextLump scriptsLump,
	              @Nullable BinaryLump behaviorLump) {
		this.mapLump = requireNonNull(mapLump, "mapLump");
		this.thingsLump = requireNonNull(thingsLump, "thingsLump");
		this.linedefsLump = requireNonNull(linedefsLump, "linedefsLump");
		this.sidedefsLump = requireNonNull(sidedefsLump, "sidedefsLump");
		this.verticesLump = requireNonNull(verticesLump, "verticesLump");
		this.segmentsLump = segmentsLump;
		this.ssectorsLump = ssectorsLump;
		this.nodesLump = nodesLump;
		this.sectorsLump = requireNonNull(sectorsLump, "sectorsLump");
		this.rejectLump = rejectLump;
		this.blockmapLump = blockmapLump;
		this.scriptsLump = scriptsLump;
		this.behaviorLump = behaviorLump;

		requireThat(mapLump.getLumpType() == LumpType.MAP,
		            "'mapLump' not of type " + LumpType.MAP + ": " + mapLump);
	}

	public Lump getMapLump() {
		return mapLump;
	}

	public ThingsLump getThingsLump() {
		return thingsLump;
	}

	public LinedefsLump getLinedefsLump() {
		return linedefsLump;
	}

	public SidedefsLump getSidedefsLump() {
		return sidedefsLump;
	}

	public VerticesLump getVerticesLump() {
		return verticesLump;
	}

	public @Nullable SegmentsLump getSegmentsLump() {
		return segmentsLump;
	}

	public @Nullable SubsectorsLump getSubsectorsLump() {
		return ssectorsLump;
	}

	public @Nullable NodesLump getNodesLump() {
		return nodesLump;
	}

	public SectorsLump getSectorsLump() {
		return sectorsLump;
	}

	public @Nullable BinaryLump getRejectLump() {
		return rejectLump;
	}

	public @Nullable BinaryLump getBlockmapLump() {
		return blockmapLump;
	}

	public @Nullable TextLump getScriptsLump() {
		return scriptsLump;
	}

	public @Nullable BinaryLump getBehaviorLump() {
		return behaviorLump;
	}

	public void cleanGeneratedData() {
		segmentsLump = null;
		ssectorsLump = null;
		nodesLump = null;
		rejectLump = null;
		blockmapLump = null;
		scriptsLump = null;
		behaviorLump = null;
	}

	public MapFormat getWadFormat() {
		return scriptsLump != null || behaviorLump != null ?
		       MapFormat.HEXEN :
		       MapFormat.DOOM;
	}
}
