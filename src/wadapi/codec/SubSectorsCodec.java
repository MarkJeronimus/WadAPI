package wadapi.codec;

import java.util.List;

import org.digitalmodular.utilities.annotation.Singleton;

import wadapi.FileBuffer;
import wadapi.LumpUtilities;
import wadapi.lump.FileBufferLump;
import wadapi.lump.SubsectorsLump;
import wadapi.structure.SubSector;

/**
 * Generated by node builders
 *
 * @author Zom-B
 */
// Created 2011-08-15
@Singleton
public class SubSectorsCodec extends LumpCodec<SubsectorsLump> {
	public static final int SUBSECTOR_FIELD_SIZE = 4;

	public static final SubSectorsCodec INSTANCE = new SubSectorsCodec();

	public SubSectorsCodec() {
		super(SubsectorsLump.class);
	}

	@Override
	public SubsectorsLump decode(FileBufferLump lump) {
		FileBuffer fileBuffer = lump.getFileBuffer();
		int numSubsectors =
				LumpUtilities.calcNumFields(fileBuffer.remaining(), SUBSECTOR_FIELD_SIZE, lump.getName());

		SubsectorsLump subSectorsLump = new SubsectorsLump(lump.getName(), numSubsectors);

		List<SubSector> subSectors = subSectorsLump.getSubSectors();
		for (int i = 0; i < numSubsectors; i++) {
			SubSector subSector = readSubsector(fileBuffer);
			subSectors.add(subSector);
		}

		return subSectorsLump;
	}

	@Override
	public void encode(SubsectorsLump subSectorsLump, FileBuffer buffer) {
		throw new UnsupportedOperationException("Not implemented: " + SubSectorsCodec.class.getSimpleName() +
		                                        ".encode()");
	}

	private static SubSector readSubsector(FileBuffer buffer) {
		int numSegs  = buffer.getUnsignedShort();
		int firstSeg = buffer.getUnsignedShort();
		return new SubSector(numSegs, firstSeg);
	}
}
