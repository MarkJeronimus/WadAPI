package wadapi.codec;

import java.util.List;

import org.digitalmodular.utilities.annotation.Singleton;

import wadapi.FileBuffer;
import wadapi.io.WadIOUtilities;
import wadapi.lump.FileBufferLump;
import wadapi.lump.NodesLump;
import wadapi.structure.Node;

/**
 * Generated by node builders
 *
 * @author Zom-B
 */
// Created 2011-08-15
@Singleton
public class NodesCodec extends LumpCodec<NodesLump> {
	public static final int NODES_FIELD_SIZE = 28;

	private static final int  ZNOD_SIGNATURE = 0x5A4E4F44; // "XNOD"
	private static final int  XNOD_SIGNATURE = 0x584E4F44; // "ZNOD"
	private static final int  ZGLN_SIGNATURE = 0x58474C4E; // "ZGLN"
	private static final int  ZGL2_SIGNATURE = 0x58474C32; // "ZGL2"
	private static final int  ZGL3_SIGNATURE = 0x58474C33; // "ZGL3"
	private static final int  XGLN_SIGNATURE = 0x58474C4E; // "XGLN"
	private static final int  XGL2_SIGNATURE = 0x58474C32; // "XGL2"
	private static final int  XGL3_SIGNATURE = 0x58474C33; // "XGL3"
	private static final long XND4_SIGNATURE = 0x784E643400000000L; // "xNd4\0\0\0\0"

	public static final NodesCodec INSTANCE = new NodesCodec();

	public NodesCodec() {
		super(NodesLump.class);
	}

	@Override
	public NodesLump decode(FileBufferLump lump) {
		FileBuffer fileBuffer = lump.getFileBuffer();

		if (fileBuffer.remaining() < 8) {
			// Use this to print a warning
			WadIOUtilities.calcNumFields(fileBuffer.remaining(), 8, lump.getName());
			return new NodesLump(lump.getName(), 0);
		}

		int  signature4 = fileBuffer.getInt();
		long signature8 = (long)signature4 << 32 | fileBuffer.getInt();

		if (signature8 == XND4_SIGNATURE) {
			return decodeDeepNodes(lump, fileBuffer);
		} else if (signature4 == XNOD_SIGNATURE) {
			return decodeExtendedNodes(lump, fileBuffer);
		} else if (signature4 == ZNOD_SIGNATURE) {
			return decodeCompressedNodes(lump, fileBuffer);
		} else {
			return decodeRegularNodes(lump, fileBuffer);
		}
	}

	private NodesLump decodeRegularNodes(FileBufferLump lump, FileBuffer fileBuffer) {
		fileBuffer.position(0);

		int numNodes = WadIOUtilities.calcNumFields(fileBuffer.remaining(), NODES_FIELD_SIZE, lump.getName());

		NodesLump nodesLump = new NodesLump(lump.getName(), numNodes);

		List<Node> nodes = nodesLump.getNodes();
		for (int i = 0; i < numNodes; i++) {
			Node node = readNode(fileBuffer);
			nodes.add(node);
		}

		return nodesLump;
	}

	private NodesLump decodeDeepNodes(FileBufferLump lump, FileBuffer fileBuffer) {
		fileBuffer.position(8);
		throw new UnsupportedOperationException("Not implemented: " + NodesCodec.class.getSimpleName() +
		                                        ".decodeDeepNodes()");
	}

	private NodesLump decodeExtendedNodes(FileBufferLump lump, FileBuffer fileBuffer) {
		fileBuffer.position(4);
		throw new UnsupportedOperationException("Not implemented: " + NodesCodec.class.getSimpleName() +
		                                        ".decodeExtendedNodes()");
	}

	private NodesLump decodeCompressedNodes(FileBufferLump lump, FileBuffer fileBuffer) {
		fileBuffer.position(4);
		throw new UnsupportedOperationException("Not implemented: " + NodesCodec.class.getSimpleName() +
		                                        ".decodeCompressedNodes()");
	}

	@Override
	public void encode(NodesLump nodes, FileBuffer buffer) {
		throw new UnsupportedOperationException("Not implemented: " + NodesCodec.class.getSimpleName() +
		                                        ".encode()");
	}

	private static Node readNode(FileBuffer buffer) {
		int x       = buffer.getShort();
		int y       = buffer.getShort();
		int dx      = buffer.getShort();
		int dy      = buffer.getShort();
		int bbox0y2 = buffer.getShort();
		int bbox0y1 = buffer.getShort();
		int bbox0x1 = buffer.getShort();
		int bbox0x2 = buffer.getShort();
		int bbox1y2 = buffer.getShort();
		int bbox1y1 = buffer.getShort();
		int bbox1x1 = buffer.getShort();
		int bbox1x2 = buffer.getShort();
		int child0  = buffer.getShort();
		int child1  = buffer.getShort();
		return new Node(x, y, dx, dy,
		                bbox0y2, bbox0y1, bbox0x1, bbox0x2,
		                bbox1y2, bbox1y1, bbox1x1, bbox1x2,
		                child0, child1);
	}
}
